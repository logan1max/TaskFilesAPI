// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskFilesAPI.DataAccess.Context;

#nullable disable

namespace TaskFilesAPI.DataAccess.Migrations
{
    [DbContext(typeof(TaskFilesContext))]
    [Migration("20241005232405_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskFilesAPI.DataAccess.Context.Entities.FileModel", b =>
                {
                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Идентификатор файла");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Тип контента файла");

                    b.Property<long>("Length")
                        .HasColumnType("bigint")
                        .HasComment("Размер файла");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Имя файла");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Идентификатор задачи");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата загрузки файла");

                    b.HasKey("FileId");

                    b.HasIndex("TaskId");

                    b.ToTable("file", t =>
                        {
                            t.HasComment("Файл");
                        });
                });

            modelBuilder.Entity("TaskFilesAPI.DataAccess.Context.Entities.TaskModel", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Идентификатор задачи");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Наименование задачи");

                    b.Property<string>("RowChangedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Автор изменения записи");

                    b.Property<DateTime>("RowChangedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата изменения записи");

                    b.Property<string>("RowCreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Автор создания записи");

                    b.Property<DateTime>("RowCreatedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата создания записи");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Статус выполнения");

                    b.HasKey("TaskId");

                    b.ToTable("task", t =>
                        {
                            t.HasComment("Задача");
                        });
                });

            modelBuilder.Entity("TaskFilesAPI.DataAccess.Context.Entities.FileModel", b =>
                {
                    b.HasOne("TaskFilesAPI.DataAccess.Context.Entities.TaskModel", "Task")
                        .WithMany("Files")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_file_relations_task");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("TaskFilesAPI.DataAccess.Context.Entities.TaskModel", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
